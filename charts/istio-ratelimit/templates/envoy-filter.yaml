---
{{- if .Values.policies }}
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: {{ include "istio-ratelimit.fullname" . }}-svc
  namespace: istio-system
spec:
  workloadSelector:
    labels:
      istio: ingressgateway
  configPatches:
  {{- range .Values.policies }}
    {{$strategy := .strategy }}
    {{$key := .key }}
    {{$hosts := .hosts }}
    {{$paths := .paths }}
    {{- range $hosts }}
      {{$host := . }}
    {{- range $paths }}
      {{$path := . }}
    - applyTo: VIRTUAL_HOST
      match:
        context: GATEWAY
        routeConfiguration:
          vhost:
            name: "{{$host}}"
            route:
              action: ANY
      patch:
        operation: MERGE
        # Applies the rate limit rules.
        value:
          rate_limits:
            - actions: # any actions in here
                - header_value_match:
                    descriptor_value: "{{ $key }}_{{ $path.type }}_{{ $path.value }}"
                    expect_match: true
                    headers:
                      - name: ":path"
                        {{ $path.type }}: "{{ $path.value }}"
              stage: 0
          {{- range $strategy }}
            {{- if eq .type "header" }}
            - actions: # any actions in here
                - header_value_match:
                    descriptor_value:  "{{ $key }}_{{ $path.type }}_{{ $path.value }}"
                    expect_match: true
                    headers:
                      - name: ":path"
                        {{ $path.type }}: "{{ $path.value }}"
                - request_headers:
                    header_name: "{{ .value }}"
                    descriptor_key:  "header_{{ .value }}"
              stage: 0
           {{- end }}
           {{- if eq .type "ip"}}
            - actions: # any actions in here
                - header_value_match:
                    descriptor_value: "{{ $key }}_{{ $path.type }}_{{ $path.value }}"
                    expect_match: true
                    headers:
                      - name: ":path"
                        {{ $path.type }}: "{{ $path.value }}"
                - remote_address: {}
              stage: 0
           {{- end }}
         {{- end }}
    {{- end }}
    {{- end }}
  {{- end }}
{{- end }}

---
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: {{ include "istio-ratelimit.fullname" . }}
  namespace: istio-system
spec:
  workloadSelector:
    # select by label in the same namespace
    labels:
      istio: ingressgateway
  configPatches:
    # The Envoy config you want to modify
    - applyTo: HTTP_FILTER
      match:
        context: GATEWAY
        listener:
          filterChain:
            filter:
              name: "envoy.filters.network.http_connection_manager"
              subFilter:
                name: "envoy.filters.http.router"
      patch:
        operation: INSERT_BEFORE
        # Adds the Envoy Rate Limit Filter in HTTP filter chain.
        value:
          name: envoy.filters.http.ratelimit
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.http.ratelimit.v3.RateLimit
            domain: ingressgateway-ratelimit # 必须匹配 ratelimit ConfigMap 中的 domain
            failure_mode_deny: false # 在故障打开模式下运行插件，如果 ratelimit 不可用则不会发生限制
            rate_limit_service:
              grpc_service:
                envoy_grpc:
                  cluster_name: rate_limit_cluster
                timeout: 0.25s
              transport_api_version: V3
{{- if .Values.customResponse.enabled }}
    - applyTo: HTTP_FILTER
      match:
        context: GATEWAY
        listener:
          filterChain:
            filter:
              name: "envoy.filters.network.http_connection_manager"
              subFilter:
                name: "envoy.filters.http.ratelimit"
      patch:
        operation: INSERT_AFTER
        value:
          name: envoy.lua
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
            inlineCode: |
              function envoy_on_request(request_handle)
                local host = request_handle:headers():get(":authority")
                if host then
                  request_handle:streamInfo():dynamicMetadata():set("envoy.lua", "request_host", host)
                end
              end
              function envoy_on_response(response_handle)
                local host = response_handle:streamInfo():dynamicMetadata():get("envoy.lua")["request_host"]
                response_handle:headers():add("request_host", host)
                if response_handle:headers():get(":status") == "429" then
                  response_handle:headers():add("ratelimit", "true")
                  response_handle:headers():replace(":status", {{ .Values.customResponse.status }})
                  response_handle:body(true):setBytes('{{ .Values.customResponse.body }}')
                  response_handle:headers():replace("content-type", "{{ .Values.customResponse.contentType }}")
                else
                  response_handle:headers():add("ratelimit", "false")
                end
              end
{{- end }}
    - applyTo: CLUSTER
      match:
        cluster:
          service: {{ include "istio-ratelimit.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local
      patch:
        operation: ADD
        # Adds the rate limit service cluster for rate limit service defined in step 1.
        value:
          name: rate_limit_cluster
          type: STRICT_DNS
          connect_timeout: 10s
          lb_policy: ROUND_ROBIN
          http2_protocol_options: {}
          load_assignment:
            cluster_name: rate_limit_cluster
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: {{ include "istio-ratelimit.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local
                          port_value: 8081
