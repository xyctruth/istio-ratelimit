# Default values for istio-ratelimit.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# limit rate policies
policies: 
  - key: group1
    hosts:
      - hw-api-fat.tanjingmama.cn:80
      - hw-api-fat.tanjingmama.cn:443
    paths:
      - type: prefix_match
        value: /kfpt-net-bg
    limit_unit: minute
    limit_requests: 5
    strategy:
      - type: ip
        limit_unit: minute
        limit_requests: 5
      - type: header
        value: "x-token"
        limit_unit: minute
        limit_requests: 5
#  - key: group1
#    hosts:
#      - test.api.xyctruth.com:80
#      - test.api.xyctruth.com:443
#    paths:
#      - type: prefix_match
#        value: /
#    limit_unit: second
#    limit_requests: 100
#    strategy:
#      - type: ip
#        limit_unit: second
#        limit_requests: 50
#      - type: header
#        value: "x-token"
#        limit_unit: second
#        limit_requests: 10


ratelimit:
  customResponse:
    status: 203
    body: "{\"msg\":\"被限流了111\"}"
    contentType: "application/json"

  image:
    repository: envoyproxy/ratelimit
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "4d2efd61"
  replicaCount: 1
  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""
  command: ["/bin/ratelimit"]

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  affinity: {}

redis:
  install: true
  auth:
    enabled: false
    password: ""
    existingSecret: ""
  ## @param redis.architecture Redis(R) architecture (`standalone` or `replication`)
  ##
  architecture: standalone
  master:
    ## @param redis.master.extraFlags Array with additional command line flags for Redis&reg; master
    ##
    extraFlags:
      ## The maxmemory configuration directive is used in order to configure Redis(R) to use a specified
      ## amount of memory for the data set. Setting maxmemory to zero results into no memory limits
      ## see https://redis.io/topics/lru-cache for more details
      ##
      - "--maxmemory 200mb"
      ## The exact behavior Redis(R) follows when the maxmemory limit is reached is configured using the
      ## maxmemory-policy configuration directive
      ## allkeys-lru: evict keys by trying to remove the less recently used (LRU) keys first, in order
      ## to make space for the new data added
      ##
      - "--maxmemory-policy allkeys-lru"
      ## ref https://stackoverflow.com/questions/22815364/flushall-and-flushdb-commands-on-redis-return-unk-command
      ## Redis official Helm chart by default disables FLUSHDB and FLUSHALL commands
      ##
    ## @param redis.master.disableCommands Array with commands to deactivate on Redis&reg;
    disableCommands: []
    ## Redis(R) Master persistence configuration
    #
    persistence:
      ## @param redis.master.persistence.enabled Enable Redis&reg; master data persistence using PVC
      ##
      enabled: false
  replica:
    ## @param redis.replica.replicaCount Number of Redis&reg; replicas to deploy
    ##
    replicaCount: 1
    ## @param redis.replica.extraFlags Array with additional command line flags for Redis&reg; replicas
    ##
    extraFlags:
      ## The maxmemory configuration directive is used in order to configure Redis(R) to use a specified
      ## amount of memory for the data set. Setting maxmemory to zero results into no memory limits
      ##
      - "--maxmemory 200mb"
      ## The exact behavior Redis(R) follows when the maxmemory limit is reached is configured using the
      ## maxmemory-policy configuration directive
      ## allkeys-lru: evict keys by trying to remove the less recently used (LRU) keys first, in order
      ## to make space for the new data added
      ##
      - "--maxmemory-policy allkeys-lru"
    ## ref https://stackoverflow.com/questions/22815364/flushall-and-flushdb-commands-on-redis-return-unk-command
    ## Redis(R) official Helm chart by default disables FLUSHDB and FLUSHALL commands
    ## @param redis.replica.disableCommands Array with commands to deactivate on Redis&reg;
    ##
    disableCommands: []
    ## Redis(R) Replica persistence configuration
    ##
    persistence:
      ## @param redis.replica.persistence.enabled Enable Redis&reg; replica data persistence using PVC
      ##
      enabled: false
